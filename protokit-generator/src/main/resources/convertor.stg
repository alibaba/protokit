

convertor_compiler_template(meta) ::= <<
<meta:package()>
<meta:imports()>
<meta:class()>

>>

package(meta) ::= <<
package <meta.packageName>;
>>

imports(meta) ::= <<
<meta.imports:meta_import(); separator="\n">
>>

meta_import(name) ::= <<
import <name>;
>>

class(meta) ::= <<
public class <meta.className>PbConvertor implements com.alibaba.protokit.gen.PbConvertor\<<meta.packageName>.<meta.className>\>{

<meta:toMethod()>
<meta:formMethod()>
}
>>

formMethod(meta) ::= <<
    @Override
    public <meta.packageName>.<meta.className> fromPbObject(Object pbObject) {
        <meta.packageName>.<meta.className> object = new <meta.packageName>.<meta.className>();
        <meta.packageName>.<meta.pbClassName> fromPbObject = (<meta.packageName>.<meta.pbClassName>) pbObject;
        <meta:formMessages()>
        return object;
    }
>>

formMessages(meta) ::= <<
<meta.proto.messages:fromMessage(); separator="\n">
>>

fromMessage(message) ::= <<
<message:fromFields()>
>>

fromFields(message) ::=<<
<message.fields:fromField(); separator="\n">
>>

fromField(field) ::=<<
<field; format="from">
>>




toMethod(meta) ::= <<
    @Override
    public \<T> T convertToPbObject(<meta.packageName>.<meta.className> object) {
        <meta.packageName>.<meta.pbClassName>.Builder builder = <meta.packageName>.<meta.pbClassName>.newBuilder();
        <meta:toMessages()>
        return (T) builder.build();
    }
>>

toMessages(meta) ::= <<
<meta.proto.messages:toMessage(); separator="\n">
>>

toMessage(message) ::= <<
<message:toFields()>
>>

toFields(message) ::=<<
<message.fields:toField(); separator="\n">
>>

toField(field) ::=<<
<field; format="to">
>>











messages(container) ::= <<
<container.proto.messages:message(); separator="\n">
>>

// skip map entry message
message(message) ::= <<
<if(message.mapEntry)>
<else>
<message.commentLines:comment(); separator="\n">
message <message.name> {
    <message:message_fields()>
    <message:messages()>
    <message:enums()>
}
<endif>
>>

comment(str) ::= <<
//<str>
>>

message_fields(message) ::= <<
<message.fields:message_field(); separator="\n">
>>

message_field(field) ::= <%
<field>
%>

enums(container) ::= <<

>>

enum(enum) ::= <<
enum <enum.name> {
    <enum:enum_values()>
}
>>

enum_values(enum) ::= <<
<enum.values:enum_value(); separator="\n">
>>

enum_value(value) ::= <<
<value.name> = <value.value>;
>>


